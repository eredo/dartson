import 'dart:convert';

import 'annotations.dart';
import 'exceptions.dart';

/// Provides the serializer to [encode] and [decode] entities. The serializer
/// encodes and decodes to respectively from Map<String, dynamic> by default.
/// In order to target different target provide a [_codec] within the
/// [Serializer] declaration.
class Dartson<R> {
  final Map<Type, DartsonEntity> _entities;

  /// If provided calls [encode] respectively [decode] on the codec.
  Codec<Object, R> _codec;

  Dartson(this._entities, {Codec<Object, R> codec}) : this._codec = codec;

  /// Encodes [data] using the encoding method generated by the builder and the
  /// [_codec] if present.
  /// Throws [UnknownEntityException] if the entity wasn't added to the
  /// [Serializer] declaration or provided by extending another serializer.
  R encode<T>(T data) {
    final entity = _getEntity<T>(T);
    final preData = entity.encoder(data, this);

    if (_codec == null) {
      return preData as R;
    }

    return _codec.encode(preData);
  }

  /// Encodes [data] by iterating over the items and using the encoding method
  /// generated by the builder and the [_codec] if present. Returns a list of
  /// serialized maps if no [_codec] is set.
  /// Throws [UnknownEntityException] if the entity wasn't added to the
  /// [Serializer] declaration or provided by extending another serializer.
  Object encodeList<T>(List<T> data) {
    final entity = _getEntity<T>(T);
    final preData = data.map((i) => entity.encoder(i, this)).toList();

    if (_codec == null) {
      return preData;
    }

    return _codec.encode(preData);
  }

  /// Decodes [data] using the [_codec] if provided and the decoding method
  /// generated by the builder.
  /// Throws [UnknownEntityException] if the entity wasn't added to the
  /// [Serializer] declaration or provided by extending another serializer.
  T decode<T>(R data) {
    final entity = _getEntity<T>(T);

    Map<String, dynamic> prepData;
    if (_codec != null) {
      prepData = _codec.decode(data);
    } else {
      prepData = data as Map<String, dynamic>;
    }

    return entity.decoder(prepData, this);
  }

  /// Decodes [list] using the [_codec] if provided and the decoding method
  /// generated by the builder.
  ///
  /// Throws [UnknownEntityException] if the entity wasn't added to the
  /// [Serializer] declaration or provided by extending another serializer.
  ///
  /// Throws [TypeError] if passed data is not a list after deserialization or
  /// if it's not a list in the first place and no converter is defined.
  List<T> decodeList<T>(Object data) {
    List prepData;
    final entity = _getEntity<T>(T);

    if (_codec != null) {
      prepData = _codec.decode(data);
      if (prepData is! List) {
        throw TypeError();
      }
    } else {
      if (data is! List) {
        throw TypeError();
      }

      prepData = data as List;
    }

    if (prepData.isEmpty) {
      return <T>[];
    }

    return prepData
        .map((d) => entity.decoder(d as Map<String, dynamic>, this))
        .toList();
  }

  /// Takes the entities of the [instance] and adds the entities of this instance
  /// and use the [_codec] of this instance.
  Dartson<R> extend(Dartson instance) =>
      new Dartson<R>({}..addAll(instance._entities)..addAll(_entities),
          codec: _codec);

  /// Returns a new [Dartson] instance using the provided [codec].
  Dartson<S> useCodec<S>(Codec<Object, S> codec) =>
      new Dartson<S>({}..addAll(_entities), codec: codec);

  DartsonEntity<T> _getEntity<T>(Type type) {
    if (!_entities.containsKey(type)) {
      throw UnknownEntityException(type);
    }

    return _entities[type] as DartsonEntity<T>;
  }
}

/// Simple container for [encoder] and [decoder] methods of an entity. This
/// shouldn't be used and is generated by the builder.
class DartsonEntity<T> {
  /// The generated encoding function.
  final Map<String, dynamic> Function(T obj, Dartson inst) encoder;

  /// The generated decoding function.
  final T Function(Map<String, dynamic> data, Dartson inst) decoder;

  const DartsonEntity(this.encoder, this.decoder);
}
